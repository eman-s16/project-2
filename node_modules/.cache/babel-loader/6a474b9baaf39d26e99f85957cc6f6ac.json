{"ast":null,"code":"import React, { useState, useEffect } from 'react';\n\nconst Timer = () => {}; // const Timer = ({name}) => {\n// \tconst { seconds, setSeconds } = useState('60');\n//     const { isCounrdownRunning, setisCounrdownRunning } = useState(false);\n//     const { shouldAlart, setshouldAlart } = useState(false);\n// \tconsole.log('timer', seconds);\n// \tuseEffect(\n// \t\t() => {\n// \t\t\tconst secondsLeft = parseInt(seconds)\n// \t\t\tif (isCounrdownRunning && secondsLeft > 0) {\n// \t\t\t\tsetTimeout(() => {\n// \t\t\t\t\tsetSeconds(secondsLeft - 1);\n// \t\t\t\t}, 1000)\n//             } else {\n//                 if (shouldAlart) {\n//                     alert(`The Countdown is over for the Timer ${name}`);\n//                     setshouldAlart(false)\n//                 }\n//                 setisCounrdownRunning(false);\n// \t\t\t}\n// \t\t},\n// \t\t[isCounrdownRunning, seconds]\n// \t)\n// \treturn (\n// \t\t<div className=\"Timer\">\n// \t\t\tThis is a {name}\n// \t\t\t<input\n// \t\t\t\tdisabled={isCounrdownRunning}\n// \t\t\t\ttype=\"number\"\n// \t\t\t\tvalue={seconds}\n// \t\t\tonChange={(event) => {\n// \t\t\t\t\tsetSeconds(event.target.value)\n// \t\t\t\t}}\n//             />\n//             <button\n//                 onClick={() => {\n//                     setisCounrdownRunning(true)\n//                     setshouldAlart(true)\n//                 }}\n//             >start countdown</button>\n// \t\t</div>\n// \t);\n// };\n\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useEffect","Timer"],"sources":["C:/Users/eman-/OneDrive/Documents/myvisualfile/_nodejs/machine/src/Timer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nconst Timer = () => {\r\n}\r\n// const Timer = ({name}) => {\r\n// \tconst { seconds, setSeconds } = useState('60');\r\n//     const { isCounrdownRunning, setisCounrdownRunning } = useState(false);\r\n//     const { shouldAlart, setshouldAlart } = useState(false);\r\n// \tconsole.log('timer', seconds);\r\n// \tuseEffect(\r\n// \t\t() => {\r\n// \t\t\tconst secondsLeft = parseInt(seconds)\r\n// \t\t\tif (isCounrdownRunning && secondsLeft > 0) {\r\n// \t\t\t\tsetTimeout(() => {\r\n// \t\t\t\t\tsetSeconds(secondsLeft - 1);\r\n// \t\t\t\t}, 1000)\r\n//             } else {\r\n//                 if (shouldAlart) {\r\n//                     alert(`The Countdown is over for the Timer ${name}`);\r\n//                     setshouldAlart(false)\r\n//                 }\r\n//                 setisCounrdownRunning(false);\r\n                \r\n// \t\t\t}\r\n// \t\t},\r\n// \t\t[isCounrdownRunning, seconds]\r\n// \t)\r\n// \treturn (\r\n// \t\t<div className=\"Timer\">\r\n// \t\t\tThis is a {name}\r\n// \t\t\t<input\r\n// \t\t\t\tdisabled={isCounrdownRunning}\r\n// \t\t\t\ttype=\"number\"\r\n// \t\t\t\tvalue={seconds}\r\n// \t\t\tonChange={(event) => {\r\n// \t\t\t\t\tsetSeconds(event.target.value)\r\n// \t\t\t\t}}\r\n//             />\r\n//             <button\r\n//                 onClick={() => {\r\n//                     setisCounrdownRunning(true)\r\n//                     setshouldAlart(true)\r\n//                 }}\r\n//             >start countdown</button>\r\n// \t\t</div>\r\n// \t);\r\n// };\r\nexport default Timer;\r\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AACA,MAAMC,KAAK,GAAG,MAAM,CACnB,CADD,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA5CMA,K;AA6CN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}